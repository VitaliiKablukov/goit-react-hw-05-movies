{"version":3,"file":"static/js/870.00c77004.chunk.js","mappings":"8PACO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBC,EAAAA,GAAAA,IAAA,6CACiBD,EADjB,8CAFpB,cAEGE,EAFH,OAKGC,EAAQD,EAASE,KALpB,kBAOID,GAPJ,oCASCF,EAAAA,GAAAA,SATD,0CAUM,CAAC,GAVP,cAYG,IAAII,MAAJ,MAZH,gF,aCsGP,EAnGqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOH,EAAP,KAAcI,EAAd,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,IAAnC,eAAOM,EAAP,KAAcC,EAAd,KACA,GAAsCP,EAAAA,EAAAA,UAAS,GAA/C,eAAOQ,EAAP,KAAoBC,EAApB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACvCC,EAAeL,EAASG,MAAMC,MAEpCE,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CAGA,IAAMS,EAAK,mCAAG,WAAMT,GAAN,oFACZL,GAAW,GADC,kBAGaZ,EAAUiB,GAHvB,QAGJd,EAHI,UAKFwB,EAAcxB,EAASM,OAAOmB,KAAI,SAAAC,GAAE,OAAIA,EAAGC,IAAP,IACpCC,EAAmBJ,EAAYK,KAAK,KACpCC,EAAsBC,OAAOC,KAAKhC,GAAUiC,OAClDpB,EAAeiB,GACfvB,GAAU,kBAAMqB,CAAN,IACVvB,GAAS,kBAAML,CAAN,KAVD,gDAaVW,EAAS,gDAbC,yBAeVF,GAAW,GAfD,4EAAH,sDAmBX,OADAc,EAAMT,GACC,WAAQ,CApBd,CAqBF,GAAE,CAACA,KACJQ,EAAAA,EAAAA,YAAU,WACHZ,GAGLwB,MAAMxB,EACP,GAAE,CAACA,IACJ,IAAQyB,EACNlC,EADMkC,SAAUC,EAChBnC,EADgBmC,aAAcC,EAC9BpC,EAD8BoC,YAAaC,EAC3CrC,EAD2CqC,aAAcC,EACzDtC,EADyDsC,MAAOZ,EAChE1B,EADgE0B,KAGlE,OACE,gCACE,SAAC,KAAD,CAASa,GAAInB,EAAb,kBACCb,GAAWI,GACV,4BACE,0BACE,gBACE6B,IACEJ,EAAW,0CAC4BA,GACnC,oDAENK,IAAKH,GAAgBZ,OAGzB,4BACE,0BACGY,GAAgBZ,EADnB,IAC0BS,EAD1B,QAGA,wCAAgBE,MAChB,sCACA,uBAAIH,KACJ,oCACA,uBAAI7B,QAGN,2BACE,yBACE,SAAC,KAAD,CACEkC,GAAE,iBAAY1B,EAAZ,SACFK,MAAO,CAAEC,KAAMF,GAFjB,UAIE,qCAGJ,yBACE,SAAC,KAAD,CACEsB,GAAE,iBAAY1B,EAAZ,YACFK,MAAO,CAAEC,KAAMF,GAFjB,UAIE,2CAIN,SAAC,EAAAyB,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,UAIJ,sEAIP,C","sources":["components/FetchFunction/FetchById.js","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nexport async function FetchById(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=1b8f437c71433f5413fc08734c0f2d02`\n    );\n    const movie = response.data;\n\n    return movie;\n  } catch (error) {\n    if (axios.isCancel) {\n      return {};\n    }\n    throw new Error(error);\n  }\n}\n","import { Outlet, useParams, NavLink, useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { FetchById } from 'components/FetchFunction/FetchById';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [genres, setGenres] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [movieLength, setMovieLength] = useState(0);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const backLocation = location.state.from;\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetch = async movieId => {\n      setLoading(true);\n      try {\n        const response = await FetchById(movieId);\n        if (response) {\n          const movieGenres = response.genres.map(el => el.name);\n          const movieGenresParse = movieGenres.join(' ');\n          const chekingObjectLength = Object.keys(response).length;\n          setMovieLength(chekingObjectLength);\n          setGenres(() => movieGenresParse);\n          setMovie(() => response);\n        }\n      } catch (error) {\n        setError('Ops we don`t have information for this movie');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetch(movieId);\n    return () => {};\n  }, [movieId]);\n  useEffect(() => {\n    if (!error) {\n      return;\n    }\n    alert(error);\n  }, [error]);\n  const { overview, release_date, poster_path, vote_average, title, name } =\n    movie;\n\n  return (\n    <section>\n      <NavLink to={backLocation}>Back</NavLink>\n      {loading || movieLength ? (\n        <div>\n          <div>\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n                  : 'https://via.placeholder.com/400x600?text=No image'\n              }\n              alt={title ? title : name}\n            />\n          </div>\n          <div>\n            <h2>\n              {title ? title : name}({release_date})\n            </h2>\n            <p>User Score: {vote_average}</p>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n            <h3>Genres</h3>\n            <p>{genres}</p>\n          </div>\n\n          <ul>\n            <li>\n              <NavLink\n                to={`/movie/${movieId}/cast`}\n                state={{ from: backLinkHref }}\n              >\n                <p>Cast</p>\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to={`/movie/${movieId}/reviews`}\n                state={{ from: backLinkHref }}\n              >\n                <p>Reviews</p>\n              </NavLink>\n            </li>\n          </ul>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      ) : (\n        <p>We don't have information for this movie</p>\n      )}\n    </section>\n  );\n};\nexport default MovieDetails;\n"],"names":["FetchById","id","axios","response","movie","data","Error","useState","setMovie","genres","setGenres","loading","setLoading","error","setError","movieLength","setMovieLength","movieId","useParams","location","useLocation","backLinkHref","state","from","backLocation","useEffect","fetch","movieGenres","map","el","name","movieGenresParse","join","chekingObjectLength","Object","keys","length","alert","overview","release_date","poster_path","vote_average","title","to","src","alt","Suspense","fallback"],"sourceRoot":""}