{"version":3,"file":"static/js/125.24f6bcbf.chunk.js","mappings":"4PAEO,SAAeA,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAMC,GAAjC,kGAEoBC,EAAAA,GAAAA,IAAA,mGACuEF,GAC5F,CAAEC,OAAAA,IAJD,cAEGE,EAFH,OAOGC,EAAQD,EAASE,KAAKC,QAPzB,kBAQIF,GARJ,oCAUCF,EAAAA,GAAAA,SAVD,0CAWM,IAXN,cAaG,IAAIK,MAAJ,MAbH,gFAgBPR,EAAYS,WAAa,CACvBR,KAAMS,IAAAA,OAAAA,WACNR,OAAQQ,IAAAA,OAAAA,Y,iDChBJC,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IA0ExB,EAxEc,WAAO,IAAD,EAClB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAqD/C,OApCAC,EAAAA,EAAAA,YAAU,WACR,GAAkB,KAAdF,GAAsC,IAAlBT,EAAOY,OAA/B,CAGA,IAAMC,EAAa,IAAIC,gBACjBC,EAAK,mCAAG,WAAMN,GAAN,8EACZN,GAAW,GADC,kBAGanB,EAAYyB,EAAWI,EAAW3B,QAH/C,QAGJE,EAHI,QAIGwB,OAAS,GACpBX,GAAU,SAAAZ,GAAK,wBAAQA,IAAR,OAAkBD,GAAlB,IAEO,IAApBA,EAASwB,QACXI,IAAAA,OAAAA,QAAA,gDAC2CP,EAD3C,MARQ,gDAaVJ,EAAS,OAbC,yBAeVF,GAAW,GAfD,4EAAH,sDAmBX,OADAY,EAAMN,GACC,WACLI,EAAWI,OACZ,CAvBA,CAwBF,GAAE,CAACR,EAAWT,KAEfW,EAAAA,EAAAA,YAAU,WACHP,GAGLc,MAAMd,EACP,GAAE,CAACA,KAGF,iCACE,kBAAMe,SAjDO,SAAAC,GACfA,EAAEC,iBACY,KAAVvB,EACFkB,IAAAA,OAAAA,QAAwB,4BAExBf,GAAU,iBAAM,EAAN,IACVO,EAAgB,CAAEV,MAAOA,IACzBC,GAAS,iBAAM,EAAN,IAEZ,EAwCG,WACE,kBAAOuB,KAAK,OAAOC,MAAOzB,EAAO0B,SAtDtB,SAAAJ,GACf,IAAMK,EAAYL,EAAEM,OAAOH,MAAMI,OACjC5B,GAAS,kBAAM0B,CAAN,GACV,KAoDK,mBAAQH,KAAK,SAAb,wBAEF,SAAC,EAAAM,SAAD,CAAUC,UAAU,2CAClB3B,IAAW,SAACP,EAAD,CAAYK,OAAQA,MAGtC,C","sources":["components/FetchFunction/FetchByName.js","components/Movie/Movie.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nexport async function FetchByName(name, signal) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=1b8f437c71433f5413fc08734c0f2d02&query=${name}`,\n      { signal }\n    );\n\n    const movie = response.data.results;\n    return movie;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n}\nFetchByName.protoTypes = {\n  name: PropTypes.string.isRequired,\n  signal: PropTypes.object.isRequired,\n};\n","import { FetchByName } from 'components/FetchFunction/FetchByName';\nimport { useState, useEffect, lazy, Suspense } from 'react';\nimport Notiflix from 'notiflix';\nimport { useSearchParams } from 'react-router-dom';\nconst SearchList = lazy(() => import('../SearchList/SearchList'));\n\nconst Movie = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryFilm = searchParams.get('query') ?? '';\n\n  const onChange = e => {\n    const queryText = e.target.value.trim();\n    setQuery(() => queryText);\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    if (query === '') {\n      Notiflix.Notify.warning('Please input name movie');\n    } else {\n      setMovies(() => []);\n      setSearchParams({ query: query });\n      setQuery(() => '');\n    }\n  };\n\n  useEffect(() => {\n    if (queryFilm === '' || movies.length !== 0) {\n      return;\n    }\n    const controller = new AbortController();\n    const fetch = async queryFilm => {\n      setLoading(true);\n      try {\n        const response = await FetchByName(queryFilm, controller.signal);\n        if (response.length > 0) {\n          setMovies(movie => [...movie, ...response]);\n        }\n        if (response.length === 0) {\n          Notiflix.Notify.warning(\n            `No movies were found for your request ${queryFilm} `\n          );\n        }\n      } catch (error) {\n        setError('Ops');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetch(queryFilm);\n    return () => {\n      controller.abort();\n    };\n  }, [queryFilm, movies]);\n\n  useEffect(() => {\n    if (!error) {\n      return;\n    }\n    alert(error);\n  }, [error]);\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" value={query} onChange={onChange} />\n        <button type=\"submit\">search</button>\n      </form>\n      <Suspense fallback={<div>Loading...</div>}></Suspense>\n      {!loading && <SearchList movies={movies} />}\n    </>\n  );\n};\nexport default Movie;\n"],"names":["FetchByName","name","signal","axios","response","movie","data","results","Error","protoTypes","PropTypes","SearchList","lazy","useState","query","setQuery","movies","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","queryFilm","get","useEffect","length","controller","AbortController","fetch","Notiflix","abort","alert","onSubmit","e","preventDefault","type","value","onChange","queryText","target","trim","Suspense","fallback"],"sourceRoot":""}