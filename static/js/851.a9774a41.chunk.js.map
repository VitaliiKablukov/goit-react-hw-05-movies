{"version":3,"file":"static/js/851.a9774a41.chunk.js","mappings":"qQAEO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBC,EAAAA,GAAAA,IAAA,6CACiBD,EADjB,sDAFpB,cAEGE,EAFH,OAKGC,EAAYD,EAASE,KAAKC,KAL7B,kBAMIF,GANJ,oCAQCF,EAAAA,GAAAA,SARD,0CASM,IATN,cAWG,IAAIK,MAAJ,MAXH,gFAcPP,EAAUQ,WAAa,CACrBP,GAAIQ,IAAAA,OAAAA,Y,aC0BN,EAxCa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaK,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAdAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAK,mCAAG,WAAMH,GAAN,uFACWZ,EAAUY,GADrB,QACNT,EADM,SAGVQ,GAAQ,kBAAMR,CAAN,IAHE,2CAAH,sDAOX,OADAY,EAAMH,GACC,WAAQ,CARd,CASF,GAAE,CAACA,KAGF,8BACE,wBACGN,EAAKU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,aAAchB,EAA0B,EAA1BA,GAAIiB,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnC,OACE,2BACE,gBACEC,IACEH,EAAY,0CAC2BA,GACnC,oDAENI,IAAKH,KAEP,uBAAIA,KACJ,uCAAeC,OAVRlB,EAaZ,OAIR,C","sources":["components/FetchFunction/FetchCast.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\nexport async function FetchCast(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=1b8f437c71433f5413fc08734c0f2d02`\n    );\n    const movieCast = response.data.cast;\n    return movieCast;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n}\nFetchCast.protoTypes = {\n  id: PropTypes.number.isRequired,\n};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FetchCast } from 'components/FetchFunction/FetchCast';\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetch = async movieId => {\n      const response = await FetchCast(movieId);\n      if (response) {\n        setCast(() => response);\n      }\n    };\n    fetch(movieId);\n    return () => {};\n  }, [movieId]);\n\n  return (\n    <section>\n      <ul>\n        {cast.map(({ profile_path, id, name, character }) => {\n          return (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : 'https://via.placeholder.com/200x300?text=No image'\n                }\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\nexport default Cast;\n"],"names":["FetchCast","id","axios","response","movieCast","data","cast","Error","protoTypes","PropTypes","useState","setCast","movieId","useParams","useEffect","fetch","map","profile_path","name","character","src","alt"],"sourceRoot":""}