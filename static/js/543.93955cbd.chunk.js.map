{"version":3,"file":"static/js/543.93955cbd.chunk.js","mappings":"qPACO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kGAEoBC,EAAAA,GAAAA,IAAA,6CACiBD,EADjB,sDAFpB,cAEGE,EAFH,OAMGC,EAAeD,EAASE,KAAKC,QANhC,kBAQIF,GARJ,oCAUCF,EAAAA,GAAAA,SAVD,0CAWM,IAXN,cAaG,IAAIK,MAAJ,MAbH,gF,aC0DP,EAxDgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgCR,OA9BAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAK,mCAAG,WAAMH,GAAN,8EACZH,GAAW,GADC,kBAGaZ,EAAae,GAH1B,QAGJZ,EAHI,SAKRO,GAAW,kBAAMP,CAAN,IALH,gDAQVW,EAAS,OARC,yBAUVF,GAAW,GAVD,4EAAH,sDAgBX,OAFAM,EAAMH,GAEC,WAAQ,CAjBd,CAkBF,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACHJ,GAGLM,MAAMN,EACP,GAAE,CAACA,KAGF,8BACE,wBACKJ,EAAQW,QAAUT,EACnBF,EAAQY,KAAI,YAA8B,IAA3BpB,EAA0B,EAA1BA,GAAIqB,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGtB,EAKZ,KAED,uEAKT,C","sources":["components/FetchFunction/FetchReviews.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nexport async function FetchReviews(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=1b8f437c71433f5413fc08734c0f2d02`\n    );\n\n    const movieReviews = response.data.results;\n\n    return movieReviews;\n  } catch (error) {\n    if (axios.isCancel) {\n      return [];\n    }\n    throw new Error(error);\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FetchReviews } from 'components/FetchFunction/FetchReviews';\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetch = async movieId => {\n      setLoading(true);\n      try {\n        const response = await FetchReviews(movieId);\n        if (response) {\n          setReviews(() => response);\n        }\n      } catch (error) {\n        setError('Ops');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetch(movieId);\n\n    return () => {};\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) {\n      return;\n    }\n    alert(error);\n  }, [error]);\n\n  return (\n    <section>\n      <ul>\n        {!!reviews.length || loading ? (\n          reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h3>Author: {author}</h3>\n                <p>{content}</p>\n              </li>\n            );\n          })\n        ) : (\n          <p>We don't have any reviews for this movie</p>\n        )}\n      </ul>\n    </section>\n  );\n};\nexport default Reviews;\n"],"names":["FetchReviews","id","axios","response","movieReviews","data","results","Error","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","fetch","alert","length","map","author","content"],"sourceRoot":""}